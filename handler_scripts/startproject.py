import sqlite3
from datetime import datetime
from pathlib import Path

from handler_scripts._exceptions import NoProjectNameError
from handler_scripts._terminal_colors import TerminalColors


def check_name_available(name: str, conn: sqlite3.Connection) -> bool:
    project_names = conn.execute(
        """SELECT COUNT(DISTINCT name) FROM project WHERE name=?;""",
        (name,),
    )
    return not bool(project_names.fetchone()[0])


def create_project(name: str) -> None:
    """TODO: Check passed name for escape characters"""
    Path.mkdir(f"{name}")
    Path.touch(f"{name}/__init__.py")
    Path(f"{name}/requirements.in").write_text(
        f"""# generated by handler_scripts/startproject.py @ {datetime.now().strftime('%d/%m/%Y, %H:%M:%S')}\n"""
    )
    Path(f"{name}/readme.md").write_text(
        """# Hello readme!\n\n## Badges go here, if any\n\n## What it is\n\n## What purpose it serves\n\n## Link to full project description\n"""
    )
    Path(f"{name}/.gitignore").write_text(
        f"""# generated by handler_scripts/startproject.py @ {datetime.now().strftime('%d/%m/%Y, %H:%M:%S')}\n"""
    )


def save_project_details(project_name: str, conn: sqlite3.Connection) -> None:
    conn.execute(
        """INSERT INTO project VALUES (?, ?, ?)""",
        (project_name, int(datetime.now().timestamp()), True),
    )


def main(**kwargs) -> None:
    project_name = kwargs["project_name"]
    if not project_name:
        raise NoProjectNameError(
            "Please supply a project name using -pr or --project_name"
        )
    if not isinstance(project_name, str):
        raise TypeError("Invalid name [type] passed")

    conn = sqlite3.connect(Path(__file__).parent.parent / "projects.db")
    conn.autocommit = False
    try:
        with conn:
            if not check_name_available(project_name, conn):
                print(
                    f"{TerminalColors.FAILURE}[Err] Name already used in another project{TerminalColors.END}"
                )
                exit(1)
            save_project_details(project_name, conn)
            create_project(project_name)
            print(
                f"{TerminalColors.SUCCESS}[X] Project saved successfully{TerminalColors.END}",
            )
    except sqlite3.OperationalError as err:
        print(
            f"{TerminalColors.FAILURE}[Err] {err}{TerminalColors.END}",
        )
        exit(1)
    except sqlite3.IntegrityError as err:
        print(
            f"{TerminalColors.FAILURE}[Err] {err}{TerminalColors.END}",
        )
        exit(1)
    conn.close()
