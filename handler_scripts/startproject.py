from datetime import datetime
from pathlib import Path
from handler_scripts._terminal_colors import TerminalColors
from handler_scripts._exceptions import NoProjectNameError


def check_name_available(name: str) -> bool:
    project_names = []
    for project in Path(".").iterdir():
        if not project.is_dir():
            continue
        project_names.append(project.name)
    return name not in project_names


def create_project(name: str) -> None:
    """TODO: Check passed name for escape characters"""
    Path.mkdir(f"{name}")
    Path.touch(f"{name}/__init__.py")
    Path(f"{name}/requirements.in").write_text(
        f"""# generated by handler_scripts/startproject.py @ {datetime.now().strftime('%d/%m/%Y, %H:%M:%S')}\n"""
    )
    Path(f"{name}/readme.md").write_text(
        """# Hello readme!\n\n## Badges go here, if any\n\n## What it is\n\n## What purpose it serves\n\n## Link to full project description\n"""
    )
    Path(f"{name}/.gitignore").write_text(
        f"""# generated by handler_scripts/startproject.py @ {datetime.now().strftime('%d/%m/%Y, %H:%M:%S')}\n"""
    )


def main(**kwargs) -> None:
    project_name = kwargs["project_name"]
    if not project_name:
        raise NoProjectNameError(
            "Please supply a project name using -pr or --project_name"
        )
    if not isinstance(project_name, str):
        raise TypeError("Invalid name [type] passed")
    if not check_name_available(project_name):
        print(
            f"{TerminalColors.FAILURE}[Err] Name already used in another project{TerminalColors.END}"
        )
        exit(1)

    create_project(project_name)
